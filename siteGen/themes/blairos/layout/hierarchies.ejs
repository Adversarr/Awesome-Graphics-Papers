<article id="hierarchy-page" class="article article-type-post" itemscope itemprop="blogPost">
  <div class="article-inner">
    <header class="article-header">
      <h4 itemprop="name">
        <a class="article-title" href="<%- url_for(page.path) %>"><strong>Hierarchies</strong></a>
      </h4>
      <br>
    </header>
    <div class="article-entry" itemprop="articleBody">
      <h3>快速跳转</h3>
      <p>
        <a href="#Rendering">渲染</a> -
        <a href="#Geometry">几何</a> -
        <a href="#CAD-CAGD">CAD 和 CAGD</a> -
        <a href="#Simulation">仿真</a> -
        <a href="#DSL-Tools">DSL 和图形工具</a>
      </p>
      <hr>
      <!-- root hierarchy -->
      <%
        const rootHier = page.hierarchies.rootHierarchy;
        const quickJumpNodes = ['Simulation', 'Geometry', 'Rendering', 'CAD-CAGD', 'DSL-Tools'];

        const processNode = function(node, depth) {
          const nodeName = node.name;
          let output = "";
          if (depth == 0) {
            output += "<p>" + nodeName + "</p>";
          } else {
            if (quickJumpNodes.includes(nodeName)) {
              output += '<div id="' + nodeName + '">' + nodeName + "</div>"; 
            } else {
              output += "<div>" + nodeName + "</div>";
            }
            //output += nodeName;
          }
  
          // check for node children
          if ("children" in node) {
            let result = node.children.map((node) => {
              return processNode(node, depth+1);
            });
            output += '<ul><li>';
            output += result.join('</li><li>');
            output += "</li></ul>";
          } else {
            // leaf node, gather articles
            if (page.hierarchies.leafNodes[nodeName].length > 0) {
              output += '<ul id="' + nodeName + '">';
              output += "<li>"
              let tagElems = [];
              page.hierarchies.leafNodes[nodeName].forEach((metaDict) => {
                tagElems.push('<a href="' + url_for(metaDict.path) + '">' + metaDict.title + '</a>');
              });
              output += tagElems.join('</li><li>');
              output += "</li>";
              output += "</ul>";
            }
          }
          return output;
        };

      %>

      <%- processNode(rootHier, 0) %>

    </div>
  </div>
</article>

